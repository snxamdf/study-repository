package com.study.repository.high.concurrence.test;import com.study.repository.high.concurrence.annoations.NotThreadSafe;import lombok.extern.slf4j.Slf4j;import java.util.concurrent.CountDownLatch;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Semaphore;/** * @author * @description * @date 2020/1/13 */@Slf4j@NotThreadSafepublic class StringBuilderTest {    static int ct = 5000;    static int tt = 200;    static StringBuilder count = new StringBuilder();    static void update() {        count.append("1");    }    public static void main(String[] args) throws InterruptedException {        //线程池        ExecutorService executorService = Executors.newCachedThreadPool();        //信号量 允许并发的数        final Semaphore semaphore = new Semaphore(tt);        //计数器        final CountDownLatch countDownLatch = new CountDownLatch(ct);        for (int i = 0; i < ct; i++) {            executorService.execute(() -> {                try {                    semaphore.acquire();                    update();                    semaphore.release();                } catch (InterruptedException e) {                    log.error("{}", e.getMessage());                }                countDownLatch.countDown();            });        }        countDownLatch.await();        executorService.shutdown();        log.info("{}   {}", count.length(), countDownLatch.getCount());    }}