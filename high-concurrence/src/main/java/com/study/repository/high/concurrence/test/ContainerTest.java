package com.study.repository.high.concurrence.test;import com.study.repository.high.concurrence.annoations.NotThreadSafe;import lombok.extern.slf4j.Slf4j;import org.assertj.core.util.Sets;import java.util.*;import java.util.concurrent.*;/** * @author * @description * @date 2020/1/15 */@Slf4j@NotThreadSafepublic class ContainerTest {    static int ct = 5000;    static int tt = 200;    static ArrayList<Integer> arrayList = new ArrayList<>();    static HashSet<Integer> hashSet = new HashSet<>();    static HashMap<Integer, Integer> hashMap = new HashMap<>();    static void update(int i) {        arrayList.add(i);        hashSet.add(i);        hashMap.put(i, i);    }    public static void main(String[] args) throws InterruptedException {        //线程池        ExecutorService executorService = Executors.newCachedThreadPool();        //信号量 允许并发的数        final Semaphore semaphore = new Semaphore(tt);        //计数器        final CountDownLatch countDownLatch = new CountDownLatch(ct);        for (int i = 0; i < ct; i++) {            int finalI = i;            executorService.execute(() -> {                try {                    semaphore.acquire();                    update(finalI);                    semaphore.release();                } catch (InterruptedException e) {                    log.error("{}", e.getMessage());                }                countDownLatch.countDown();            });        }        countDownLatch.await();        executorService.shutdown();        log.info("{}", arrayList.size());        log.info("{}", hashSet.size());        log.info("{}", hashMap.size());    }}/** * Collections.synchronizedXXX */@Slf4jclass ThreadSafe {    static int ct = 5000;    static int tt = 200;    static List<Integer> list = new Vector<>();    static Set<Integer> hashSet = Collections.synchronizedSet(Sets.newHashSet());    static Map<Integer, Integer> hashMap = new Hashtable<>();    static void update(int i) {        list.add(i);        hashSet.add(i);        hashMap.put(i, i);    }    public static void main(String[] args) throws InterruptedException {        //线程池        ExecutorService executorService = Executors.newCachedThreadPool();        //信号量 允许并发的数        final Semaphore semaphore = new Semaphore(tt);        //计数器        final CountDownLatch countDownLatch = new CountDownLatch(ct);        for (int i = 0; i < ct; i++) {            int finalI = i;            executorService.execute(() -> {                try {                    semaphore.acquire();                    update(finalI);                    semaphore.release();                } catch (InterruptedException e) {                    log.error("{}", e.getMessage());                }                countDownLatch.countDown();            });        }        countDownLatch.await();        executorService.shutdown();        log.info("list {}", list.size());        log.info("set {}", hashSet.size());        log.info("map {}", hashMap.size());    }}//线程不安全的情况下//由于两个线程执行顺序的不同导致get时数组越界class VectorNotThreadSafe {    static Vector<Integer> list = new Vector<>();    public static void main(String[] args) {        while (true) {            for (int i = 0; i < 10; i++) {                list.add(i);            }            Thread t1 = new Thread() {                @Override                public void run() {                    for (int i = 0; i < list.size(); i++) {                        list.remove(i);                    }                }            };            Thread t2 = new Thread() {                @Override                public void run() {                    for (int i = 0; i < list.size(); i++) {                        list.get(i);                    }                }            };            t1.start();            t2.start();        }    }}@Slf4jclass CopyOnWriteArrayListTest {    static int ct = 5000;    static int tt = 200;    static List<Integer> arrayList = new CopyOnWriteArrayList<>();    static void update(int i) {        arrayList.add(i);    }    public static void main(String[] args) throws InterruptedException {        //线程池        ExecutorService executorService = Executors.newCachedThreadPool();        //信号量 允许并发的数        final Semaphore semaphore = new Semaphore(tt);        //计数器        final CountDownLatch countDownLatch = new CountDownLatch(ct);        for (int i = 0; i < ct; i++) {            int finalI = i;            executorService.execute(() -> {                try {                    semaphore.acquire();                    update(finalI);                    semaphore.release();                } catch (InterruptedException e) {                    log.error("{}", e.getMessage());                }                countDownLatch.countDown();            });        }        countDownLatch.await();        executorService.shutdown();        log.info("{}", arrayList.size());    }}