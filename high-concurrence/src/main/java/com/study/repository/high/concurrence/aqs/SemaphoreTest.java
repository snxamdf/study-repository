package com.study.repository.high.concurrence.aqs;import lombok.extern.slf4j.Slf4j;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Semaphore;/** * @author * @description * @date 2020/1/15 */@Slf4jpublic class SemaphoreTest {    static int threadCount = 20;    public static void main(String[] args) throws InterruptedException {        ExecutorService executorService = Executors.newCachedThreadPool();        final Semaphore semaphore = new Semaphore(3);        for (int i = 0; i < threadCount; i++) {            int finalI1 = i;            executorService.execute(() -> {                try {                    //获取一个许可                    semaphore.acquire();                    test(finalI1);                    //释放一个许可                    semaphore.release();                } catch (InterruptedException e) {                    log.error("{}", e.getMessage());                }            });        }        log.info("finish");        executorService.shutdown();    }    static void test(int num) throws InterruptedException {        //看日志时间是一秒钟大约执行3个        log.info("{}", num);        Thread.sleep(1000);    }}