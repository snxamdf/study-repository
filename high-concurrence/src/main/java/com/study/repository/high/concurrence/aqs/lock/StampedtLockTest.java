package com.study.repository.high.concurrence.aqs.lock;import lombok.extern.slf4j.Slf4j;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Semaphore;import java.util.concurrent.locks.ReentrantLock;/** * @author * @description * @date 2020/1/16 */@Slf4jpublic class StampedtLockTest {  static int ct = 5000;    static int tt = 200;    static int count = 0;    static ReentrantLock reentrantLock = new ReentrantLock();    static void add() {        reentrantLock.lock();        count++;        reentrantLock.unlock();    }    public static void main(String[] args) throws InterruptedException {        //线程池        ExecutorService executorService = Executors.newCachedThreadPool();        //信号量 允许并发的数        final Semaphore semaphore = new Semaphore(tt);        for (int i = 0; i < ct; i++) {            executorService.execute(() -> {                try {                    semaphore.acquire();                    add();                    semaphore.release();                } catch (InterruptedException e) {                    log.error("{}", e.getMessage());                }            });        }        executorService.shutdown();        log.info("{}", count);    }}